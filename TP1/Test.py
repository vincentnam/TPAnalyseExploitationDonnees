import pandas as pd
import math
import re
import numpy as np


def split_line(text):
    return text.split()

def PPMI (x, y, texte):
    # INITIALISATION

    # Taille des fenêtres de mots
    taille_fenetre=5

    # Vecteurs d'occurence de X, de Y et d'occurrences simultannées de X et Y
    occur_x = np.array([])
    occur_y = np.array([])
    occur_xy = np.array([])

    # BODY
    # Début lecture texte
    # Pour un curseur allant de 0 à taille(texte)-1
    # (-1 car les tableaux commencent à 0 et non à 1)
    for curseur in range((len(texte)-1)):
        # Remise à 0 des compteurs d'occurences de (X,Y), X et Y
        Tfxy = 0
        Tfx = 0
        Tfy = 0
        # Fenêtre glissante
        fenetre_aux=np.array([])

        # Construction des fenêtres
        # On veut récupérer les 5 mots du texte à partir du curseurs soit :
        # fenetre_aux = [texte[curseur],texte[curseur+1],texte[curseur+2],texte[curseur+3],texte[curseur+4]]

        # Pour i allant de 0 à la taille de la fenêtre
        for i in range(taille_fenetre):
            # Si le curseur dépasse du texte
            # len(texte)-1 : les indices commencent à 0 tandis que la taille commence à 1
            # donc il faut soustraire 1 pour que cela coïncide
            if i+curseur > len(texte)-1:
                # On sort
                break
            # Ajout du mot dans la fenêtre
            fenetre_aux = np.append(fenetre_aux, texte[i + curseur ])
        # Remise à 0 du booléen
        pas_vu = 0
        # Pour tous les mots de la fenêtre actuelle
        for mot in fenetre_aux:

            # Si le mot considéré est le mot X
            if mot == x :
                # Incrémentation du compteur de X
                Tfx += 1

            # Si le mot considéré est le mot Y
            if mot == y :
                # Incrémentation du compteur de Y
                Tfy +=1
            # Si le mot X et le mot Y ont été rencontré dans cette fenêtre
            # et si c'est la première fois qu'ils ont été compté
            if Tfx >= 1 and Tfy >= 1  and pas_vu  :
                # On met le compte à 1
                Tfxy = 1
                # On indique que le mot a déjà été compté
                pas_vu = False

                # Affichage du contexte
                print(str(Tfxy) +" " )
                for i in fenetre_aux:
                    print(i, end=' ')
        # Soit notre fenêtre glissantes :
        # fenêtre = [mot1, mot2, mot3, mot4, mot5]

        # Ajout du nombre d'apparition de x et y dans leur vecteur correspondants
        occur_x = np.append(occur_x, Tfx)
        occur_y = np.append(occur_y, Tfy)
        # Ajout du nombre d'apparition conjointes de x et y
        occur_xy = np.append(occur_xy, Tfxy)

    # Réinitialisation des compteurs
    Tfxy = 0
    Tfy=0
    Tfx=0
    print(occur_x)
    print(occur_y)
    print(occur_xy)
    # Comptage du total d'apparition de X dans les N contextes
    for apparition in occur_x :
        Tfx += apparition
    # Comptage du total d'apparition de Y dans les N contextes
    for apparition in occur_y :
        Tfy += apparition
    # Comptage du total d'apparition conjointe de X et Y dans les N contextes
    for apparition in occur_xy :
        Tfxy += apparition

    # Compteur du nombre d'occurences de X et Y
    occurences_total = Tfx + Tfy
    print(occurences_total)
    print(str(Tfxy) + " / " + str(occurences_total) )

    # Sont-ce les bonnes formules à appliquer ? Pas certain !
    # Probabilité d'avoir X et Y (correspond à la fréquence de (X,Y) ?)
    Pxy = Tfxy / occurences_total
    print("Pxy =" + str(Pxy))
    # Probabilité d'avoir X  (correspond à la fréquence de X ?)
    Px = Tfx / occurences_total
    print("Px =" + str(Px))
    # Probabilité d'avoir Y  (correspond à la fréquence de Y ?)
    Py = Tfy / occurences_total
    print("Py =" + str(Py))
    base_log = 10
    pmi = math.log((Pxy / (Px * Py)), base_log)
    print((Pxy / (Px * Py)))

    if pmi > 0:
        return pmi
    else:
        return 0




text = "A chaque ville, son explication. Les gares sur l’axe Atlantique (Toulouse, " \
       "Tours et Bordeaux) ont par exemple été touchées par les travaux de la LGV Sud-Europe Atlantique, " \
       "reliant Paris à Bordeaux en 2h04, inaugurée au début du mois de juillet." \
       " Toulouse, relié à Paris via Bordeaux en TGV, a donc fait les frais de cette entreprise, débutée en 2012."

# Suppression de tous les caractères qui ne sont pas : de a à z, de A à Z,
# de 0 à 9, de "à" à "é", de "é" à "è" (cf codage ASCII)
text_aux = re.sub(r"[^a-zA-Z0-9-à-é-è]+", ' ', text)
print(text_aux)
print(split_line(text_aux))

res = PPMI("Bordeaux","Toulouse",split_line(text_aux))
print(res)